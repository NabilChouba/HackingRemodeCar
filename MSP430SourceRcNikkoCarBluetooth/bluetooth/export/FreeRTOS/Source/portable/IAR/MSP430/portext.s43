/*
    FreeRTOS V6.0.2 - Copyright (C) 2010 Real Time Engineers Ltd.

    ***************************************************************************
    *                                                                         *
    * If you are:                                                             *
    *                                                                         *
    *    + New to FreeRTOS,                                                   *
    *    + Wanting to                                                         *
    *    + Wanting to improve your FreeRTOS skillearn FreeRTOS or multitasking* 
    *      in general quickly                                                 *
    *    + Looking for basic training,         ls and productivity            *
    *                                                                         *
    * then take a look at the FreeRTOS eBook                                  *
    *                                                                         *
    *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
    *                  http://www.FreeRTOS.org/Documentation                  *
    *                                                                         *
    * A pdf reference manual is also available.  Both are usually delivered   *
    * to your inbox within 20 minutes to two hours when purchased between 8am *
    * and 8pm GMT (although please allow up to 24 hours in case of            *
    * exceptional circumstances).  Thank you for your support!                *
    *                                                                         *
    ***************************************************************************

    This file is part of the FreeRTOS distribution.

    FreeRTOS is free software; you can redistribute it and/or modify it under
    the terms of the GNU General Public License (version 2) as published by the
    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
    ***NOTE*** The exception to the GPL is included to allow you to distribute
    a combined work that includes FreeRTOS without being obliged to provide the
    source code for proprietary components outside of the FreeRTOS kernel.
    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
    more details. You should have received a copy of the GNU General Public
    License and the FreeRTOS license exception along with FreeRTOS; if not it
    can be viewed here: http://www.freertos.org/a00114.html and also obtained
    by writing to Richard Barry, contact details for whom are available on the
    FreeRTOS WEB site.

    1 tab == 4 spaces!

    http://www.FreeRTOS.org - Documentation, latest information, license and
    contact details.

    http://www.SafeRTOS.com - A version that is certified for use in safety
    critical systems.

    http://www.OpenRTOS.com - Commercial support, development, porting,
    licensing and training services.
*/

#include "FreeRTOSConfig.h"


         EXTERN usCriticalNesting
	     EXTERN pxCurrentTCB
	     EXTERN vTaskIncrementTick
	     EXTERN vTaskSwitchContext
	     EXTERN prvSetupTimerInterrupt
	     EXTERN vApplicationTickHook

	     PUBLIC vPortYield
         PUBLIC xPortStartScheduler

/*-----------------------------------------------------------*/

// ;               NAME portSAVE_CONTEXT

portSAVE_CONTEXT MACRO

        pushx.a    r4		
        pushx.a    r5
        pushx.a    r6
        pushx.a    r7
        pushx.a    r8
        pushx.a    r9
        pushx.a    r10
        pushx.a    r11
        pushx.a    r12
        pushx.a    r13
        pushx.a    r14
        pushx.a    r15

        movx.w   &usCriticalNesting, r15
        pushx.w    r15

        movx.w   &pxCurrentTCB, r12
        movx.w   r1, 0(r12)

        ENDM

/*-----------------------------------------------------------*/

// ;               NAME portRESTORE_CONTEXT

portRESTORE_CONTEXT MACRO

        movx.w   &pxCurrentTCB, r12	
        movx.w   @r12, r1

        popx.w     r15

        movx.w   r15, &usCriticalNesting

        popx.a             r15
        popx.a             r14
        popx.a             r13
        popx.a             r12
        popx.a             r11
        popx.a             r10
        popx.a             r9
        popx.a             r8
        popx.a             r7
        popx.a             r6
        popx.a             r5
        popx.a             r4

        reti

        ENDM

/*-----------------------------------------------------------*/

/* .CODE */
ORG	0F500h	; just a known free space...

/*
 * The RTOS tick ISR.
 *
 * If the cooperative scheduler is in use this simply increments the tick
 * count.
 *
 * If the preemptive scheduler is in use a context switch can also occur.
 */

vTickISR
        portSAVE_CONTEXT

        calla    #vTaskIncrementTick

        #if configUSE_TICK_HOOK == 1

        calla    #vApplicationTickHook

        #endif

        #if configUSE_PREEMPTION == 1
                calla    #vTaskSwitchContext
        #endif

        portRESTORE_CONTEXT
        
/*-----------------------------------------------------------*/


/*
 * Manual context switch called by the portYIELD() macro.
 */

vPortYield:

        /* Mimic an interrupt by pushing the SR. */

        /* SR is 16-bits in 430X architecture */

        pushx.w    SR

        /* Now the SR is stacked we can disable interrupts. */
        dint

        /* Make stack look like we entered from an ISR instead of a CALLA */

        bicx.w #0xF000,0(r1)	
        swpbx.w +4(r1)		
        rlax.w +4(r1)		
        rlax.w +4(r1)		
        rlax.w +4(r1)		
        rlax.w +4(r1)		
        addx.w +4(r1),0(r1)	
        movx.w +2(r1),+4(r1)	
        movx.w 0(r1),+2(r1)	
        incdx.a r1		

        /* Save the context of the current task. */
        portSAVE_CONTEXT

        /* Switch to the highest priority task that is ready to run. */
        calla	#vTaskSwitchContext		

        /* Restore the context of the new task. */
        portRESTORE_CONTEXT
/*-----------------------------------------------------------*/


/*
 * Start off the scheduler by initialising the RTOS tick timer, then restoring
 * the context of the first task.
 */

/* this never returns... */
xPortStartScheduler:

        /* Setup the hardware to generate the tick.  Interrupts are disabled
        when this function is called. */

        calla    #prvSetupTimerInterrupt

        /* Restore the context of the first task that is going to run. */

        portRESTORE_CONTEXT

/*-----------------------------------------------------------*/
END
		
